// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Fetcher is an autogenerated mock type for the Fetcher type
type Fetcher[T interface{}] struct {
	mock.Mock
}

type Fetcher_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Fetcher[T]) EXPECT() *Fetcher_Expecter[T] {
	return &Fetcher_Expecter[T]{mock: &_m.Mock}
}

// Fetch provides a mock function with given fields: ctx
func (_m *Fetcher[T]) Fetch(ctx context.Context) (T, error) {
	ret := _m.Called(ctx)

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (T, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) T); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetcher_Fetch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fetch'
type Fetcher_Fetch_Call[T interface{}] struct {
	*mock.Call
}

// Fetch is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Fetcher_Expecter[T]) Fetch(ctx interface{}) *Fetcher_Fetch_Call[T] {
	return &Fetcher_Fetch_Call[T]{Call: _e.mock.On("Fetch", ctx)}
}

func (_c *Fetcher_Fetch_Call[T]) Run(run func(ctx context.Context)) *Fetcher_Fetch_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Fetcher_Fetch_Call[T]) Return(_a0 T, _a1 error) *Fetcher_Fetch_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fetcher_Fetch_Call[T]) RunAndReturn(run func(context.Context) (T, error)) *Fetcher_Fetch_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetLastModified provides a mock function with given fields: ctx
func (_m *Fetcher[T]) GetLastModified(ctx context.Context) (time.Time, error) {
	ret := _m.Called(ctx)

	var r0 time.Time
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Time, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Time); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetcher_GetLastModified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLastModified'
type Fetcher_GetLastModified_Call[T interface{}] struct {
	*mock.Call
}

// GetLastModified is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Fetcher_Expecter[T]) GetLastModified(ctx interface{}) *Fetcher_GetLastModified_Call[T] {
	return &Fetcher_GetLastModified_Call[T]{Call: _e.mock.On("GetLastModified", ctx)}
}

func (_c *Fetcher_GetLastModified_Call[T]) Run(run func(ctx context.Context)) *Fetcher_GetLastModified_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Fetcher_GetLastModified_Call[T]) Return(_a0 time.Time, _a1 error) *Fetcher_GetLastModified_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Fetcher_GetLastModified_Call[T]) RunAndReturn(run func(context.Context) (time.Time, error)) *Fetcher_GetLastModified_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetTarget provides a mock function with given fields:
func (_m *Fetcher[T]) GetTarget() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Fetcher_GetTarget_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTarget'
type Fetcher_GetTarget_Call[T interface{}] struct {
	*mock.Call
}

// GetTarget is a helper method to define mock.On call
func (_e *Fetcher_Expecter[T]) GetTarget() *Fetcher_GetTarget_Call[T] {
	return &Fetcher_GetTarget_Call[T]{Call: _e.mock.On("GetTarget")}
}

func (_c *Fetcher_GetTarget_Call[T]) Run(run func()) *Fetcher_GetTarget_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Fetcher_GetTarget_Call[T]) Return(_a0 string) *Fetcher_GetTarget_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Fetcher_GetTarget_Call[T]) RunAndReturn(run func() string) *Fetcher_GetTarget_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewFetcher creates a new instance of Fetcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFetcher[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Fetcher[T] {
	mock := &Fetcher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
