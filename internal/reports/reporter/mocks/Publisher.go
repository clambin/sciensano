// Code generated by mockery v2.32.2. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Publisher is an autogenerated mock type for the Publisher type
type Publisher[T interface{}] struct {
	mock.Mock
}

type Publisher_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *Publisher[T]) EXPECT() *Publisher_Expecter[T] {
	return &Publisher_Expecter[T]{mock: &_m.Mock}
}

// Register provides a mock function with given fields: _a0
func (_m *Publisher[T]) Register(_a0 chan T) {
	_m.Called(_a0)
}

// Publisher_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Publisher_Register_Call[T interface{}] struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - _a0 chan T
func (_e *Publisher_Expecter[T]) Register(_a0 interface{}) *Publisher_Register_Call[T] {
	return &Publisher_Register_Call[T]{Call: _e.mock.On("Register", _a0)}
}

func (_c *Publisher_Register_Call[T]) Run(run func(_a0 chan T)) *Publisher_Register_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan T))
	})
	return _c
}

func (_c *Publisher_Register_Call[T]) Return() *Publisher_Register_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *Publisher_Register_Call[T]) RunAndReturn(run func(chan T)) *Publisher_Register_Call[T] {
	_c.Call.Return(run)
	return _c
}

// Unregister provides a mock function with given fields: _a0
func (_m *Publisher[T]) Unregister(_a0 chan T) {
	_m.Called(_a0)
}

// Publisher_Unregister_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unregister'
type Publisher_Unregister_Call[T interface{}] struct {
	*mock.Call
}

// Unregister is a helper method to define mock.On call
//   - _a0 chan T
func (_e *Publisher_Expecter[T]) Unregister(_a0 interface{}) *Publisher_Unregister_Call[T] {
	return &Publisher_Unregister_Call[T]{Call: _e.mock.On("Unregister", _a0)}
}

func (_c *Publisher_Unregister_Call[T]) Run(run func(_a0 chan T)) *Publisher_Unregister_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(chan T))
	})
	return _c
}

func (_c *Publisher_Unregister_Call[T]) Return() *Publisher_Unregister_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *Publisher_Unregister_Call[T]) RunAndReturn(run func(chan T)) *Publisher_Unregister_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewPublisher creates a new instance of Publisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPublisher[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Publisher[T] {
	mock := &Publisher[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
