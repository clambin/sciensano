// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	memcache "github.com/bradfitz/gomemcache/memcache"
	mock "github.com/stretchr/testify/mock"
)

// MemCacheClient is an autogenerated mock type for the MemCacheClient type
type MemCacheClient struct {
	mock.Mock
}

// Get provides a mock function with given fields: _a0
func (_m *MemCacheClient) Get(_a0 string) (*memcache.Item, error) {
	ret := _m.Called(_a0)

	var r0 *memcache.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*memcache.Item, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) *memcache.Item); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*memcache.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: _a0
func (_m *MemCacheClient) Set(_a0 *memcache.Item) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*memcache.Item) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMemCacheClient creates a new instance of MemCacheClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMemCacheClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MemCacheClient {
	mock := &MemCacheClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
