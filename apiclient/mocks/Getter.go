// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	apiclient "github.com/clambin/sciensano/apiclient"

	mock "github.com/stretchr/testify/mock"
)

// Getter is an autogenerated mock type for the Getter type
type Getter struct {
	mock.Mock
}

// GetCases provides a mock function with given fields: ctx
func (_m *Getter) GetCases(ctx context.Context) ([]*apiclient.APICasesResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*apiclient.APICasesResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*apiclient.APICasesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apiclient.APICasesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestResults provides a mock function with given fields: ctx
func (_m *Getter) GetTestResults(ctx context.Context) ([]*apiclient.APITestResultsResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*apiclient.APITestResultsResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*apiclient.APITestResultsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apiclient.APITestResultsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaccinations provides a mock function with given fields: ctx
func (_m *Getter) GetVaccinations(ctx context.Context) ([]*apiclient.APIVaccinationsResponse, error) {
	ret := _m.Called(ctx)

	var r0 []*apiclient.APIVaccinationsResponse
	if rf, ok := ret.Get(0).(func(context.Context) []*apiclient.APIVaccinationsResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*apiclient.APIVaccinationsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
