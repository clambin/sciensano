// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package apiclient

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson49604308DecodeGithubComClambinSciensanoApiclient(in *jlexer.Lexer, out *APIHospitalisationsResponseEntry) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DATE":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStamp).UnmarshalJSON(data))
			}
		case "PROVINCE":
			out.Province = string(in.String())
		case "REGION":
			out.Region = string(in.String())
		case "TOTAL_IN":
			out.TotalIn = int(in.Int())
		case "TOTAL_IN_ICU":
			out.TotalInICU = int(in.Int())
		case "TOTAL_IN_RESP":
			out.TotalInResp = int(in.Int())
		case "TOTAL_IN_ECMO":
			out.TotalInECMO = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49604308EncodeGithubComClambinSciensanoApiclient(out *jwriter.Writer, in APIHospitalisationsResponseEntry) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DATE\":"
		out.RawString(prefix[1:])
		out.Raw((in.TimeStamp).MarshalJSON())
	}
	{
		const prefix string = ",\"PROVINCE\":"
		out.RawString(prefix)
		out.String(string(in.Province))
	}
	{
		const prefix string = ",\"REGION\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"TOTAL_IN\":"
		out.RawString(prefix)
		out.Int(int(in.TotalIn))
	}
	{
		const prefix string = ",\"TOTAL_IN_ICU\":"
		out.RawString(prefix)
		out.Int(int(in.TotalInICU))
	}
	{
		const prefix string = ",\"TOTAL_IN_RESP\":"
		out.RawString(prefix)
		out.Int(int(in.TotalInResp))
	}
	{
		const prefix string = ",\"TOTAL_IN_ECMO\":"
		out.RawString(prefix)
		out.Int(int(in.TotalInECMO))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIHospitalisationsResponseEntry) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49604308EncodeGithubComClambinSciensanoApiclient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIHospitalisationsResponseEntry) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49604308EncodeGithubComClambinSciensanoApiclient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIHospitalisationsResponseEntry) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49604308DecodeGithubComClambinSciensanoApiclient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIHospitalisationsResponseEntry) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49604308DecodeGithubComClambinSciensanoApiclient(l, v)
}
func easyjson49604308DecodeGithubComClambinSciensanoApiclient1(in *jlexer.Lexer, out *APIHospitalisationsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(APIHospitalisationsResponse, 0, 8)
			} else {
				*out = APIHospitalisationsResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *APIHospitalisationsResponseEntry
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(APIHospitalisationsResponseEntry)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson49604308EncodeGithubComClambinSciensanoApiclient1(out *jwriter.Writer, in APIHospitalisationsResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v APIHospitalisationsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson49604308EncodeGithubComClambinSciensanoApiclient1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIHospitalisationsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson49604308EncodeGithubComClambinSciensanoApiclient1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIHospitalisationsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson49604308DecodeGithubComClambinSciensanoApiclient1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIHospitalisationsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson49604308DecodeGithubComClambinSciensanoApiclient1(l, v)
}
